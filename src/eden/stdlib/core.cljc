(ns eden.stdlib.core
  (:require
   [clojure.pprint :as pprint]
   [eden.def :refer [set-var!]]))


(defn uuid
  ([s] (java.util.UUID/fromString s))
  ([] (java.util.UUID/randomUUID)))

;;(uuid (str (uuid)))


(defn import-stdlib-core [eden]
  (-> eden
      (set-var! 'apply apply)
      (set-var! 'add-watch add-watch)
      (set-var! 'assoc assoc)
      (set-var! 'assoc-in assoc-in)
      (set-var! 'associative? associative?)
      (set-var! 'atom atom)
      (set-var! 'bit-and bit-and)
      (set-var! 'bit-and-not bit-and-not)
      (set-var! 'bit-clear bit-clear)
      (set-var! 'bit-flip bit-flip)
      (set-var! 'bit-not bit-not)
      (set-var! 'bit-or bit-or)
      (set-var! 'bit-set bit-set)
      (set-var! 'bit-shift-left bit-shift-left)
      (set-var! 'bit-shift-right bit-shift-right)
      (set-var! 'bit-test bit-test)
      (set-var! 'bit-xor bit-xor)
      (set-var! 'boolean boolean)
      (set-var! 'boolean? boolean?)
      (set-var! 'butlast butlast)
      (set-var! 'byte byte)
      (set-var! 'char char)
      (set-var! 'char? char?)
      #?(:clj (set-var! 'class class))
      #?(:clj (set-var! 'class? class?))
      (set-var! 'coll? coll?)
      (set-var! 'comp comp)
      (set-var! 'compare compare)
      (set-var! 'complement complement)
      (set-var! 'concat concat)
      (set-var! 'conj conj)
      (set-var! 'cons cons)
      (set-var! 'constantly constantly)
      (set-var! 'contains? contains?)
      (set-var! 'count count)
      (set-var! 'counted? counted?)
      (set-var! 'cycle cycle)
      (set-var! 'dec dec)
      #?(:clj (set-var! 'decimal? decimal?))
      (set-var! 'dedupe dedupe)
      (set-var! 'deref deref)
      (set-var! 'disj disj)
      (set-var! 'dissoc dissoc)
      (set-var! 'distinct distinct)
      (set-var! 'distinct? distinct?)
      ;; TODO: do
      (set-var! 'double double)
      (set-var! 'double? double?)
      (set-var! 'drop drop)
      (set-var! 'drop-last drop-last)
      (set-var! 'drop-while drop-while)
      (set-var! 'empty empty)
      (set-var! 'ensure-reduced ensure-reduced)
      (set-var! 'even? even?)
      (set-var! 'every? every?)
      (set-var! 'false? false?)
      (set-var! 'ffirst ffirst)
      (set-var! 'filter filter)
      (set-var! 'filterv filterv)
      (set-var! 'find find)
      (set-var! 'first first)
      (set-var! 'flatten flatten)
      (set-var! 'float float)
      (set-var! 'float? float?)
      (set-var! 'flush flush)
      (set-var! 'fnext fnext)
      (set-var! 'fnil fnil)
      (set-var! 'future #(future (%)))
      (set-var! 'future? future?)
      #?(:clj (set-var! 'format format))
      (set-var! 'get get)
      (set-var! 'get-in get-in)
      (set-var! 'group-by group-by)
      (set-var! 'identical? identical?)
      (set-var! 'identity identity)
      (set-var! 'inc inc)
      (set-var! 'indexed? indexed?)
      (set-var! 'inst-ms inst-ms)
      (set-var! 'inst? inst?)
      (set-var! 'int int)
      (set-var! 'int? int?)
      (set-var! 'integer? integer?)
      (set-var! 'interleave interleave)
      (set-var! 'interpose interpose)
      (set-var! 'into into)
      (set-var! 'iterate iterate)
      (set-var! 'juxt juxt)
      (set-var! 'keep keep)
      (set-var! 'keep-indexed keep-indexed)
      (set-var! 'key key)
      (set-var! 'keys keys)
      (set-var! 'keyword keyword)
      (set-var! 'keyword? keyword?)
      (set-var! 'last last)
      (set-var! 'list list)
      (set-var! 'list? list)
      (set-var! 'long long)
      (set-var! 'map map)
      (set-var! 'map-indexed map-indexed)
      (set-var! 'map? map?)
      (set-var! 'mapcat mapcat)
      (set-var! 'mapv mapv)
      (set-var! 'max max)
      (set-var! 'max-key max-key)
      (set-var! 'memoize memoize)
      (set-var! 'merge merge)
      (set-var! 'merge-with merge-with)
      (set-var! 'min min)
      (set-var! 'min-key min-key)
      (set-var! 'mod mod)
      (set-var! 'name name)
      (set-var! 'nat-int? nat-int?)
      (set-var! 'neg-int? neg-int?)
      (set-var! 'neg? neg?)
      (set-var! 'newline newline)
      (set-var! 'next next)
      (set-var! 'nfirst nfirst)
      (set-var! 'nil? nil?)
      (set-var! 'nnext nnext)
      (set-var! 'not-any? not-any?)
      (set-var! 'not-empty not-empty)
      (set-var! 'not-every? not-every?)
      (set-var! 'nth nth)
      (set-var! 'nthnext nthnext)
      (set-var! 'nthrest nthrest)
      #?(:clj (set-var! 'num num))
      (set-var! 'number? number?)
      #?(:clj (set-var! 'numerator numerator))
      (set-var! 'odd? odd?)
      (set-var! 'partial partial)
      (set-var! 'partition partition)
      (set-var! 'partition-all partition-all)
      (set-var! 'partition-by partition-by)
      (set-var! 'peek peek)
      (set-var! 'pop pop)
      (set-var! 'pos-int? pos-int?)
      (set-var! 'pos? pos?)
      (set-var! 'pprint pprint/pprint)
      (set-var! 'pprint-str #(with-out-str (pprint/pprint %)))
      (set-var! 'pr pr)
      (set-var! 'pr-str pr-str)
      (set-var! 'print print)
      (set-var! 'print-str print-str)
      (set-var! 'print-table pprint/print-table)
      #?(:clj (set-var! 'printf printf))
      (set-var! 'println println)
      (set-var! 'println-str println-str)
      (set-var! 'prn prn)
      (set-var! 'prn-str prn-str)
      (set-var! 'quot quot)
      (set-var! 'rand rand)
      (set-var! 'rand-int rand-int)
      (set-var! 'rand-nth rand-nth)
      (set-var! 'random-sample random-sample)
      (set-var! 'range range)
      #?(:clj (set-var! 'ratio? ratio?))
      #?(:clj (set-var! 'rational? rational?))
      #?(:clj (set-var! 'rationalize rationalize))
      (set-var! 're-find re-find)
      #?(:clj (set-var! 're-groups re-groups))
      #?(:clj (set-var! 're-matcher re-matcher))
      (set-var! 're-matches re-matches)
      (set-var! 're-pattern re-pattern)
      (set-var! 'regex re-pattern)
      (set-var! 're-seq re-seq)
      (set-var! 'reduce reduce)
      (set-var! 'reduced reduced)
      (set-var! 'reduced? reduced?)
      (set-var! 'repeat repeat)
      (set-var! 'rem rem)
      (set-var! 'remove remove)
      (set-var! 'remove-watch remove-watch)
      (set-var! 'repeatedly repeatedly)
      (set-var! 'replace replace)
      (set-var! 'reset! reset!)
      (set-var! 'rest rest)
      (set-var! 'reverse reverse)
      (set-var! 'reversible? reversible?)
      (set-var! 'rseq rseq)
      (set-var! 'second second)
      (set-var! 'select-keys select-keys)
      (set-var! 'seq seq)
      (set-var! 'seq? seq?)
      (set-var! 'seqable? seqable?)
      #?(:clj (set-var! 'seque seque))
      (set-var! 'sequence sequence)
      (set-var! 'sequential? sequential?)
      (set-var! 'set set)
      (set-var! 'set? set?)
      (set-var! 'short short)
      (set-var! 'shuffle shuffle)
      #?(:clj (set-var! 'slurp slurp))
      (set-var! 'sleep #(Thread/sleep %))
      (set-var! 'some some)
      (set-var! 'some? some?)
      (set-var! 'sort sort)
      (set-var! 'sort-by sort-by)
      (set-var! 'sorted-map sorted-map)
      (set-var! 'sorted-map-by sorted-map-by)
      (set-var! 'sorted-set sorted-set)
      (set-var! 'sorted-set-by sorted-set-by)
      (set-var! 'sorted? sorted?)
      #?(:clj (set-var! 'spit spit))
      (set-var! 'split-at split-at)
      (set-var! 'split-with split-with)
      (set-var! 'str str)
      (set-var! 'string? string?)
      (set-var! 'subs subs)
      (set-var! 'subvec subvec)
      (set-var! 'swap! swap!)
      (set-var! 'symbol symbol)
      (set-var! 'symbol? symbol?)
      (set-var! 'take take)
      (set-var! 'take-last take-last)
      (set-var! 'take-nth take-nth)
      (set-var! 'take-while take-while)
      (set-var! 'true? true?)
      (set-var! 'type type)
      (set-var! 'unreduced unreduced)
      (set-var! 'update update)
      (set-var! 'update-in update-in)
      (set-var! 'uri? uri?)
      (set-var! 'uuid? uuid?)
      (set-var! 'uuid uuid)
      (set-var! 'val val)
      (set-var! 'vals vals)
      (set-var! 'vec vec)
      (set-var! 'vector vector)
      (set-var! 'vector? vector?)
      (set-var! 'zero? zero?)
      (set-var! 'zipmap zipmap)))
  
