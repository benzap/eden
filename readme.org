#+TITLE: Eden - lua-based scripting language in clojure
#+AUTHOR: Benjamin Zaporzan
#+DATE: 2018-07-01
#+EMAIL: benzaporzan@gmail.com
#+LANGUAGE: en
#+OPTIONS: H:2 num:t toc:t \n:nil ::t |:t ^:t f:t tex:t

[[https://travis-ci.org/benzap/eden][https://travis-ci.org/benzap/eden.svg?branch=master]]

[[https://clojars.org/eden][https://img.shields.io/clojars/v/eden.svg]]

[[./doc/logo.svg]]

*eden* is a language akin to traditional scripting languages like lua,
python or ruby. It is embeddable, extensible, sandboxed, and
familiarly simple.

*eden* is unique, in that it uses only valid EDN data values for data
representation. This has the added benefit of ridiculously easy
clojure interoperability.

/eden is still in beta development, so things are going to be broken,
undocumented, and error messages are close to non-existent./

#+BEGIN_SRC clojure
  (require '[eden.core :as eden])

  (eden/eval println("Hello World!"))
  ;; Hello World!
  ;;

  (eden/eval
   local x = 2 + 2

   function add2(x)
     return x + 2
   end

   println("The value of x plus 2 equals" add2(x)))
  ;; The value of x plus 2 equals 6
  ;;

  ;;
  ;; Almost all of clojure's core libraries work out-of-the-box within
  ;; eden
  ;;

  (eden/eval println(rest([1 2 3 4]))) ;; (2 3 4)
  (eden/eval
   local x = list(1 2 3 4)
   for i in x do
     println(i)
   end)
   ;; 1
   ;; 2
   ;; 3
   ;; 4

  ;;
  ;; Even higher-level clojure functions work in eden
  ;;
  (eden/eval
   local result = map(inc vector(1 2 3 4))
   println(result))
  ;; (2 3 4 5)

  (eden/eval
   local sum = reduce(function(a b) return a + b end list(1 2 3 4))
   println(sum))
  ;; 10
   
  ;; Functions written in eden can be used within clojure
  (eden/eval
   function addfirst2(xs)
     return first(xs) + second(xs)
   end)

  (def addfirst2 (eden/get-var 'addfirst2))
  (println (addfirst2 [1 2 3 4]))
  ;; 3

  ;;
  ;; More advanced stuff
  ;;

  ;; eden uses dot notation for retrieving and assigning to edn hash maps
  (eden/eval
   local person = {}
   person.first-name = "John"
   person.last-name = "Doe"
   person.age = 12
   println(person))
  ;; {:first-name John, :last-name Doe, :age 12}

  ;; similarly, vectors can be accessed using square bracket notation
  (eden/eval
   local list-of-letters = ["a" "b" "c"]
   println(list-of-letters[1])) ;; b

  ;; These can be mixed together to manipulate more elaborate structures
  (eden/eval
   local default-person = {}
   default-person.first-name = "John"
   default-person.last-name = "Doe"

   local display = function(p)
     println(p.first-name "-" p.last-name)
   end

   local person-list = [
     default-person
     default-person
   ]

   person-list[0].first-name = "Ben"
   person-list[0].last-name = "Z"
   person-list[1].first-name = "Jane"
   person-list[1].last-name "M"

   println(person-list)
   display(person-list[0]))
   ;; [{:first-name Ben, :last-name Z} {:first-name Jane, :last-name Doe}]
   ;; Ben - Z
#+END_SRC

