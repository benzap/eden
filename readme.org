#+TITLE: Eden - lua-based scripting language in clojure
#+AUTHOR: Benjamin Zaporzan
#+DATE: 2018-07-01
#+EMAIL: benzaporzan@gmail.com
#+LANGUAGE: en
#+OPTIONS: H:2 num:t toc:t \n:nil ::t |:t ^:t f:t tex:t

[[https://travis-ci.org/benzap/eden][https://travis-ci.org/benzap/eden.svg?branch=master]]

[[https://clojars.org/eden][https://img.shields.io/clojars/v/eden.svg]]

[[./doc/logo.png]]

*eden* is a language akin to traditional scripting languages like lua,
python or ruby. It is embeddable, extensible, sandboxed, and
familiarly simple.

*eden* is unique, in that it uses only valid EDN data values for data
representation. This has the added benefit of ridiculously easy
clojure interoperability.

/eden is still in beta development, so things are going to be broken,
undocumented, and error messages are close to non-existent./

#+BEGIN_SRC
  (require '[eden.core :as eden])

  (eden/eval println("Hello World!"))
  ;; Hello World!
  ;;

  (eden/eval
   local x = 2 + 2

   function add2(x)
     return x + 2
   end

   println("The value of x plus 2 equals" add2(x)))
  ;; The value of x plus 2 equals 6
  ;;

#+END_SRC


Almost all of clojures core libraries work out-of-the-box within eden


#+BEGIN_SRC

  (eden/eval println(rest([1 2 3 4]))) ;; (2 3 4)

  (eden/eval println(conj([1 2 3] 4))) ;; [1 2 3 4]

  (eden/eval
   local x = list(1 2 3 4)
   for i in x do
     println(i)
   end)
   ;; 1
   ;; 2
   ;; 3
   ;; 4

#+END_SRC


Even higher-level clojure functions work in eden


#+BEGIN_SRC

  (eden/eval
   local result = map(inc vector(1 2 3 4))
   println(result))
  ;; (2 3 4 5)

  (eden/eval
   local sum = reduce(function(a b) return a + b end list(1 2 3 4))
   println(sum))
  ;; 10

#+END_SRC

Functions written in *eden* can be used within clojure

#+BEGIN_SRC

  (eden/eval
   function addfirst2(xs)
     return first(xs) + second(xs)
   end)

  (def addfirst2 (eden/get-var 'addfirst2))
  (println (addfirst2 [1 2 3 4]))
  ;; 3

#+END_SRC

Functions written in clojure can be used within *eden*
 
#+BEGIN_SRC

  (defn hello [name]
    (str "Hello " name "!"))

  (eden/set-var! 'hello hello)
  (eden/eval hello("Ben")) ;; "Hello Ben!"

#+END_SRC

*eden* uses dot notation for retrieving and assigning to EDN
collections, like vectors and hash maps.

#+BEGIN_SRC

  (eden/eval
   local person = {}
   person.first-name = "John"
   person.last-name = "Doe"
   person.age = 12
   println(person))
  ;; {:first-name John, :last-name Doe, :age 12}

  ;;
  ;; similarly, vectors can be accessed using square bracket notation
  ;;

  (eden/eval
   local list-of-letters = ["a" "b" "c"]
   println(list-of-letters[1])) ;; b

#+END_SRC


The getter syntax makes it much easier to manipulate more complex
collections.

#+BEGIN_SRC

  (eden/eval
   local default-person = {}
   default-person.first-name = "John"
   default-person.last-name = "Doe"

   local display = function(p)
     println(p.first-name "-" p.last-name)
   end

   local person-list = [
     default-person
     default-person
   ]

   person-list[0].first-name = "Ben"
   person-list[0].last-name = "Z"
   person-list[1].first-name = "Jane"
   person-list[1].last-name "M"

   println(person-list)
   display(person-list[0]))
   ;; [{:first-name Ben, :last-name Z} {:first-name Jane, :last-name Doe}]
   ;; Ben - Z

#+END_SRC

* Rationale

  *eden* was developed to be a embedded language within a natively
  compiled clojure application (GraalVM'a native-image). It can be
  used to expose the application API so that a userbase can create
  plugins in a sandboxed environment. The applications of *eden*
  within clojure are very similar to the applications of lua within
  c/c++.

  *eden* can also be used as a standalone scripting language. A
  natively compiled commandline tool has been developed, and can be
  used to manipulate EDN files similar to how you would implement JSON
  files in javascript. Everything is still in its early stages, so I
  would not recommend using it in a production setting.

  I also plan on compiling *eden* to clojurescript, although the
  applications of eden within clojurescript are not of interest to me
  at the moment.

* Requirements
  
  *eden* requires clojure 1.9+

* Installation
** Native Executable
   Native Executables can be found on the [[https://github.com/benzap/eden/releases][releases page]]
   
   There are currently native executables generated for debian-based
   linux systems, and for rpm-based systems.

   If you would like to generate your own native executable, please
   follow the configuration instructions included in the Makefile.

   An example use:

   #+BEGIN_SRC sh
   $ eden -e "println(\"Hello World!\")"
   Hello World!
   $
   #+END_SRC

   #+BEGIN_SRC
   ;; hello.eden

   function hello(name)
     return str("Hello " name "!")
   end

   local name = system.args[0] or "there"
   println(hello(name))
   #+END_SRC

   #+BEGIN_SRC sh
   $ eden hello.eden ben
   Hello ben!
   #+END_SRC

** Uberjar
   Alternatively, the uberjar can be found on the [[https://github.com/benzap/eden/releases][releases page]], which
   can be run as follows with ~java~

   #+BEGIN_SRC sh
   java -jar eden-<version>-standalone.jar <filename>
   #+END_SRC

** Clojure Installation

   For the latest version, please visit [[https://clojars.org/eden][clojars.org]]

   *Leiningen/Boot*
  
  #+BEGIN_SRC clojure

  [eden "0.7.0-SNAPSHOT"]

  #+END_SRC

   *Clojure CLI/deps.edn*

  #+BEGIN_SRC clojure

  eden {:mvn/version "0.7.0-SNAPSHOT"}

  #+END_SRC

   *Gradle*

  #+BEGIN_SRC groovy

  compile 'eden:eden:0.7.0-SNAPSHOT'

  #+END_SRC

   *Maven*

  #+BEGIN_SRC xml

  <dependency>
    <groupId>eden</groupId>
    <artifactId>eden</artifactId>
    <version>0.7.0-SNAPSHOT</version>
  </dependency>

  #+END_SRC

* Introduction

  *eden* is an imperative language, so it embraces the idea of mutable
  values being passed around. However, *eden* re-uses the persistent
  data collections that make up clojure, which makes eden
  copy-on-write when performing operations on collections.

  #+BEGIN_SRC

  function people-eq?(p1 p2)
    if p1 == p2 then
      println("Are Equal!")
    else
      println("Not Equal!")
    end
  end

  local person1 = {:first-name 12 :age 12}
  local person2 = person1

  people-eq?(person1 person2) ;; Are Equal!

  person2.age = 13

  people-eq?(person1 person2) ;; Not Equal!

  #+END_SRC

  In a more traditional language like lua, ~person2~ would hold a
  reference to the same data structure as ~person1~. However, *eden*
  uses copy-on-write semantics. They never share a reference. If you
  want to share a reference between variables, use a clojure atom.

  #+BEGIN_SRC

  local person1 = atom({:first-name "Ben" :age 12})
  local person2 = person1
                
  swap!(person2 function(p) p.age = 13 return p end)
  println(deref(person1)) ;; {:first-name Ben, :age 13}

  #+END_SRC

* Commandline Execution

  *eden* can be run from the commandline. It can evaluate-expressions
  with the -e commandline flag, or can evaluate files, which are
  usually designated with the suffix *.eden.

  From the leiningen cloned project, you can run the examples provided
  in the ./examples folder

  #+BEGIN_SRC sh

  $ lein run ./examples/eden/get_project_version.eden
  0.7.0-SNAPSHOT

  #+END_SRC

  Alternatively, you can use the provided standalone *.jar file
  provided on the releases page

  #+BEGIN_SRC

  $ java -jar eden-0.7.0-SNAPSHOT.jar ./examples/eden/basic_http_server.eden

  #+END_SRC

  The best use of *eden* as a standalone tool is to either build your
  own native executable, or grab one of the pre-compiled ones provided
  on the [[https://github.com/benzap/eden/releases][releases page]]

* Module System

  *eden* has a simple module system. eden will look for files based on
  the current working directory, and any paths in the Environment
  Variable EDEN_MODULE_PATH, which should contain comma-separated
  directory paths.

  /Currently broken, only works in current working directory/

  As an example, assuming I have a file named test.eden in the current
  working directory:

  #+BEGIN_SRC
  ;; test.eden

  local print-hello = function(name)
    return println(str("Hello " name "!"))
  end

  export {:hello print-hello}

  #+END_SRC

  importing the module is simple:

  #+BEGIN_SRC
  
  test = require "test"

  test.hello("Ben") ;; "Hello Ben!"

  #+END_SRC


* Dark-corners of Eden

  Since *eden* uses EDN data values directly, it does mean some funky
  things can happen unexpectedly.

** Vectors get confused as indexes
   
   #+BEGIN_SRC

   map(inc [1 2 3])

   #+END_SRC
   
   This says /get the index [1 2 3] of inc/. The equivalent in clojure
   would be ~(get-in inc [1 2 3])~, which is not what we want. The
   solution is to use the ~vector~ function.
   
   #+BEGIN_SRC
   
   map(inc vector(1 2 3))

   #+END_SRC

** The EDN parser gets confused with complex map hashes

   #+BEGIN_SRC

   local x = {
     :x 2 + 2
     :y 3 - 2
   }

   #+END_SRC

   The parser will fail, since the resulting map within eden appears
   as ~{:x 2, '+ 2, :y 3, '- 2}~. The solution is to group each
   expression in round brackets:

   #+BEGIN_SRC

   local x = {
     :x (2 + 2)
     :y (3 - 2)
   }

   ;; similarly for functions
   local y = {
     :hello (function(name) return str("Hello " name "!") end)
   }

   #+END_SRC

* Differences between Lua and Eden
** Array Indexing
   eden uses zero-indexing for array types, whereas lua uses
   one-indexing for array types.
   
   #+BEGIN_SRC lua
    -- Lua
    x = {"A", "B", "C"}
    print(x[1]) -- A
   #+END_SRC

   #+BEGIN_SRC clojure
    ;; eden
    x = ["A" "B" "C"]
    println(x[1]) ;; B
   #+END_SRC
** Module Systems
   *eden* adopts a module system with the special keyword ~export~ for
   exporting, whereas Lua reuses ~return~ to represent the module
   export.

   #+BEGIN_SRC lua
     -- Lua
     local x = {}
     x.test = function()
       print("test!")
     end

     return x
   #+END_SRC

   #+BEGIN_SRC clojure
     ;; eden
     local x = {}
     x.test = function()
       println("test!")
     end

     export x
   #+END_SRC

* Development
** Uberjar
   Run ~lein uberjar~
   
   This generates a jar file in ./target/*.jar

** Native Executable Distribution
   Please read the Makefile for instructions on how to native compile
   *eden* using GraalVM.
*** Debian DPKG
    ~make dpkg~
*** Redhat RPM
    ~make rpm~
*** Tar Archive
    ~make tar~
** Testing
   Tests can be run with ~lein test~
* Features for Version 1.0.0 Stable Release

  - +Test Coverage for the entire standard language+
  - +Better parser errors (might require a parser rewrite)+
  - +support 'elseif clause in if conditionals+ (added in 0.4.0-SNAPSHOT)
  - +Additional standard libraries.+ (Several libraries have been
    added since 0.5.0-SNAPSHOT)
  - +clojure.string (or use funcool.cuerdas, can it native compile?)+
    (added in 0.3.0-SNAPSHOT)
  - +json parse and stringify libs (one that native compiles)+ (added in 0.3.0-SNAPSHOT)
