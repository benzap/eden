#+TITLE: Eden - lua-based scripting language in clojure
#+AUTHOR: Benjamin Zaporzan
#+DATE: 2018-07-01
#+EMAIL: benzaporzan@gmail.com
#+LANGUAGE: en
#+OPTIONS: H:2 num:t toc:t \n:nil ::t |:t ^:t f:t tex:t

[[https://travis-ci.org/benzap/eden][https://travis-ci.org/benzap/eden.svg?branch=master]]

[[https://clojars.org/eden][https://img.shields.io/clojars/v/eden.svg]]

[[./doc/logo.svg]]

*eden* is a language akin to traditional scripting languages like lua,
python or ruby. It is embeddable, extensible, sandboxed, and
familiarly simple.

*eden* is unique, in that it uses only valid EDN data values for data
representation. This has the added benefit of ridiculously easy
clojure interoperability.

/eden is still in beta development, so things are going to be broken,
undocumented, and error messages are close to non-existent./

#+BEGIN_SRC
  (require '[eden.core :as eden])

  (eden/eval println("Hello World!"))
  ;; Hello World!
  ;;

  (eden/eval
   local x = 2 + 2

   function add2(x)
     return x + 2
   end

   println("The value of x plus 2 equals" add2(x)))
  ;; The value of x plus 2 equals 6
  ;;

#+END_SRC


Almost all of clojures core libraries work out-of-the-box within eden


#+BEGIN_SRC

  (eden/eval println(rest([1 2 3 4]))) ;; (2 3 4)
  (eden/eval
   local x = list(1 2 3 4)
   for i in x do
     println(i)
   end)
   ;; 1
   ;; 2
   ;; 3
   ;; 4

#+END_SRC


Even higher-level clojure functions work in eden


#+BEGIN_SRC

  (eden/eval
   local result = map(inc vector(1 2 3 4))
   println(result))
  ;; (2 3 4 5)

  (eden/eval
   local sum = reduce(function(a b) return a + b end list(1 2 3 4))
   println(sum))
  ;; 10

#+END_SRC

Functions written in *eden* can be used within clojure

#+BEGIN_SRC

  (eden/eval
   function addfirst2(xs)
     return first(xs) + second(xs)
   end)

  (def addfirst2 (eden/get-var 'addfirst2))
  (println (addfirst2 [1 2 3 4]))
  ;; 3

#+END_SRC

Functions written in clojure can be used within *eden*
 
#+BEGIN_SRC

  (defn hello [name]
    (str "Hello " name "!"))

  (eden/set-var! 'hello hello)
  (eden/eval hello("Ben")) ;; "Hello Ben!"

#+END_SRC

*eden* uses dot notation for retrieving and assigning to EDN
collections, like vectors and hash maps.

#+BEGIN_SRC

  (eden/eval
   local person = {}
   person.first-name = "John"
   person.last-name = "Doe"
   person.age = 12
   println(person))
  ;; {:first-name John, :last-name Doe, :age 12}

  ;;
  ;; similarly, vectors can be accessed using square bracket notation
  ;;

  (eden/eval
   local list-of-letters = ["a" "b" "c"]
   println(list-of-letters[1])) ;; b

#+END_SRC


The getter syntax makes it much easier to manipulate more complex
collections.

#+BEGIN_SRC

  (eden/eval
   local default-person = {}
   default-person.first-name = "John"
   default-person.last-name = "Doe"

   local display = function(p)
     println(p.first-name "-" p.last-name)
   end

   local person-list = [
     default-person
     default-person
   ]

   person-list[0].first-name = "Ben"
   person-list[0].last-name = "Z"
   person-list[1].first-name = "Jane"
   person-list[1].last-name "M"

   println(person-list)
   display(person-list[0]))
   ;; [{:first-name Ben, :last-name Z} {:first-name Jane, :last-name Doe}]
   ;; Ben - Z

#+END_SRC

* Requirements
  
  *eden* requires clojure 1.9+

* Installation

For the latest version, please visit [[https://clojars.org/eden][clojars.org]]

  *Leiningen/Boot*
  
  #+BEGIN_SRC clojure

  [eden "0.1.0-SNAPSHOT"]

  #+END_SRC

  *Clojure CLI/deps.edn*

  #+BEGIN_SRC clojure

  eden {:mvn/version "0.1.0-SNAPSHOT"}

  #+END_SRC

  *Gradle*

  #+BEGIN_SRC groovy

  compile 'eden:eden:0.1.0-SNAPSHOT'

  #+END_SRC

  *Maven*

  #+BEGIN_SRC xml

  <dependency>
    <groupId>eden</groupId>
    <artifactId>eden</artifactId>
    <version>0.1.0-SNAPSHOT</version>
  </dependency>

  #+END_SRC

* Introduction

  *eden* is an imperative language, so it embraces the idea of mutable
  values being passed around. However, *eden* re-uses the persistent
  data collections that make up clojure, which makes eden
  copy-on-write when performing operations on collections.

  #+BEGIN_SRC

  function people-eq?(p1 p2)
    if p1 == p2 then
      println("Are Equal!")
    else
      println("Not Equal!")
    end
  end

  local person1 = {:first-name 12 :age 12}
  local person2 = person1

  people-eq?(person1 person2) ;; Are Equal!

  person2.age = 13

  people-eq?(person1 person2) ;; Not Equal!

  #+END_SRC

  In a more traditional language like lua, ~person2~ would hold a
  reference to the same data structure as ~person1~. However, *eden*
  uses copy-on-write semantics. They never share a reference. If you
  want to share a reference between variables, use a clojure atom.

  #+BEGIN_SRC

  local age = atom(12)
  person1 = atom({:first-name "Ben" :age 12})
  person2 = person1
                
  swap!(person2 function(p) p.age = 13 return p end)
  println(deref(person1)) ;; {:first-name Ben, :age 13}

  #+END_SRC

* Commandline Execution

  *eden* can be run from the commandline. It currently does not have a
  repl, but this is something i'm hoping to include in the future
  when the parser is more mature.

  #+BEGIN_SRC

eden Language Commandline eval
Usage:
  eden <options>
  eden <filename> [arguments..] [options]
  
Options:
  -h, --help    Show this screen.
  -e            Evaluate Commandline Arguments
Website:
  github.com/benzap/eden
Notes:
  * Commandline Arguments are placed in the variable sys.args

  #+END_SRC

* Native Executable
  
  A native executable is planned for linux as debian and rpm packages
  by generating a native image using GraalVM. In the future, GraalVM
  should support windows, which would lead to an eden executable being
  generated as a cross-platform scripting tool.

* Module System

  *eden* has a simple module system. eden will look for files based on
  the current working directory, and any paths in the Environment
  Variable EDEN_MODULE_PATH, which should contain comma-separated
  directory paths.

  As an example, assuming I have a file named test.eden in the current
  working directory:

  #+BEGIN_SRC
  ;; test.eden

  local print-hello = function(name)
    return println(str("Hello " name "!"))
  end

  export {:hello print-hello}

  #+END_SRC

  importing the module is simple:

  #+BEGIN_SRC
  
  test = require "test"

  test.hello("Ben") ;; "Hello Ben!"

  #+END_SRC

* Features for Version 1.0.0 Stable Release

  - Test Coverage for the entire standard language
  - Better parser errors (might require a parser rewrite)
  - support 'elseif clause in if conditionals
  - additional language syntax for simplifying collection transformations
    ie. person.age += 1, instead of person.age = person.age + 1
    ie. x = [1 2]
        x .= conj(3), instead of x = conj(x 3)
  - Additional standard libraries.
   - clojure.string (or use funcool.cuerdas, can it native compile?)
   - json parse and stringify libs
  - Implementation in clojurescript (currently compiles, but has bugs)
  - Working repl
